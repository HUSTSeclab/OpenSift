// This file is auto-generated by @hey-api/openapi-ts

export type ModelGitFileAppendManualReq = {
    gitLink?: string;
};

export type ModelGitFileDto = {
    failedTimes?: number;
    filePath?: string;
    gitLink?: string;
    lastSuccess?: string;
    message?: string;
    success?: boolean;
    takeStorage?: number;
    takeTimeMs?: number;
    updateTime?: string;
};

export type ModelGitFileStatisticsResultDto = {
    fail?: number;
    neverSuccess?: number;
    success?: number;
    total?: number;
};

export type ModelGitFileStatusResp = {
    collector?: RpcStatusResp;
    gitFile?: ModelGitFileStatisticsResultDto;
};

export type ModelPageDtoModelGitFileDto = {
    count?: number;
    items?: Array<ModelGitFileDto>;
    start?: number;
    total?: number;
};

export type ModelPageDtoModelRankingResultDto = {
    count?: number;
    items?: Array<ModelRankingResultDto>;
    start?: number;
    total?: number;
};

export type ModelPageDtoModelResultDto = {
    count?: number;
    items?: Array<ModelResultDto>;
    start?: number;
    total?: number;
};

export type ModelRankingResultDto = {
    distDetail?: Array<ModelResultDistDetailDto>;
    distroScore?: number;
    gitDetail?: Array<ModelResultGitMetadataDto>;
    gitScore?: number;
    langDetail?: Array<ModelResultLangDetailDto>;
    langScore?: number;
    link?: string;
    ranking?: number;
    score?: number;
    scoreID?: number;
    updateTime?: string;
};

export type ModelResultDto = {
    distDetail?: Array<ModelResultDistDetailDto>;
    distroScore?: number;
    gitDetail?: Array<ModelResultGitMetadataDto>;
    gitScore?: number;
    langDetail?: Array<ModelResultLangDetailDto>;
    langScore?: number;
    link?: string;
    score?: number;
    scoreID?: number;
    updateTime?: string;
};

export type ModelResultDistDetailDto = {
    count?: number;
    impact?: number;
    pageRank?: number;
    type?: number;
    updateTime?: string;
};

export type ModelResultGitMetadataDto = {
    commitFrequency?: number;
    contributorCount?: number;
    createdSince?: string;
    language?: Array<string>;
    license?: Array<string>;
    orgCount?: number;
    updateTime?: string;
    updatedSince?: string;
};

export type ModelResultLangDetailDto = {
    depCount?: number;
    langEcoImpact?: number;
    type?: number;
    updateTime?: string;
};

export type RpcStatusResp = {
    currentTasks?: Array<TaskRunningTask>;
    isRunning?: boolean;
    pendingTasks?: Array<string>;
};

export type TaskRunningTask = {
    link?: string;
    start?: string;
};

export type GetAdminGitfilesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Git link
         */
        link?: string;
        /**
         * Filter, 0: no filter, 1: success, 2: fail, 3: never success
         */
        filter?: number;
        /**
         * Skip count
         */
        skip?: number;
        /**
         * Take count
         */
        take?: number;
    };
    url: '/admin/gitfiles';
};

export type GetAdminGitfilesResponses = {
    /**
     * OK
     */
    200: ModelPageDtoModelGitFileDto;
};

export type GetAdminGitfilesResponse = GetAdminGitfilesResponses[keyof GetAdminGitfilesResponses];

export type PostAdminGitfilesManualData = {
    /**
     * Append manual request
     */
    body: ModelGitFileAppendManualReq;
    path?: never;
    query?: never;
    url: '/admin/gitfiles/manual';
};

export type PostAdminGitfilesManualErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostAdminGitfilesManualError = PostAdminGitfilesManualErrors[keyof PostAdminGitfilesManualErrors];

export type PostAdminGitfilesManualResponses = {
    /**
     * No Content
     */
    204: string;
};

export type PostAdminGitfilesManualResponse = PostAdminGitfilesManualResponses[keyof PostAdminGitfilesManualResponses];

export type PostAdminGitfilesStartData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/gitfiles/start';
};

export type PostAdminGitfilesStartErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostAdminGitfilesStartError = PostAdminGitfilesStartErrors[keyof PostAdminGitfilesStartErrors];

export type PostAdminGitfilesStartResponses = {
    /**
     * No Content
     */
    204: string;
};

export type PostAdminGitfilesStartResponse = PostAdminGitfilesStartResponses[keyof PostAdminGitfilesStartResponses];

export type GetAdminGitfilesStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/gitfiles/status';
};

export type GetAdminGitfilesStatusErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetAdminGitfilesStatusError = GetAdminGitfilesStatusErrors[keyof GetAdminGitfilesStatusErrors];

export type GetAdminGitfilesStatusResponses = {
    /**
     * OK
     */
    200: ModelGitFileStatusResp;
};

export type GetAdminGitfilesStatusResponse = GetAdminGitfilesStatusResponses[keyof GetAdminGitfilesStatusResponses];

export type PostAdminGitfilesStopData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/gitfiles/stop';
};

export type PostAdminGitfilesStopErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostAdminGitfilesStopError = PostAdminGitfilesStopErrors[keyof PostAdminGitfilesStopErrors];

export type PostAdminGitfilesStopResponses = {
    /**
     * No Content
     */
    204: string;
};

export type PostAdminGitfilesStopResponse = PostAdminGitfilesStopResponses[keyof PostAdminGitfilesStopResponses];

export type GetHistoriesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Git link
         */
        link: string;
        /**
         * Skip count
         */
        start?: number;
        /**
         * Take count
         */
        take?: number;
    };
    url: '/histories';
};

export type GetHistoriesResponses = {
    /**
     * OK
     */
    200: ModelPageDtoModelResultDto;
};

export type GetHistoriesResponse = GetHistoriesResponses[keyof GetHistoriesResponses];

export type GetRankingsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip count
         */
        start?: number;
        /**
         * Take count
         */
        take?: number;
        /**
         * Include details
         */
        detail?: boolean;
    };
    url: '/rankings';
};

export type GetRankingsResponses = {
    /**
     * OK
     */
    200: ModelPageDtoModelRankingResultDto;
};

export type GetRankingsResponse = GetRankingsResponses[keyof GetRankingsResponses];

export type GetResultsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Search query
         */
        q: string;
        /**
         * Skip count
         */
        start?: number;
        /**
         * Take count
         */
        take?: number;
    };
    url: '/results';
};

export type GetResultsResponses = {
    /**
     * OK
     */
    200: ModelPageDtoModelResultDto;
};

export type GetResultsResponse = GetResultsResponses[keyof GetResultsResponses];

export type GetResultsByScoreidData = {
    body?: never;
    path: {
        /**
         * Score ID
         */
        scoreid: number;
    };
    query?: never;
    url: '/results/{scoreid}';
};

export type GetResultsByScoreidResponses = {
    /**
     * OK
     */
    200: ModelResultDto;
};

export type GetResultsByScoreidResponse = GetResultsByScoreidResponses[keyof GetResultsByScoreidResponses];

export type ClientOptions = {
    baseUrl: `${string}://src/api/v1` | (string & {});
};